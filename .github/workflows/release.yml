name: release
on:
  workflow_dispatch: {}
  release:
    types: [published]
permissions:
  id-token: write
  contents: write
  packages: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
      - id: run-info
        name: collect job run info
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          echo "ko-docker-repo=${KO_DOCKER_REPO,,}" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version-file: go.mod
          check-latest: true
          cache-dependency-path: go.sum
      - name: build
        env:
          CI_COMMIT_TAG: ${{ github.event.release.name }}
        run: ./hack/publish.sh --sign
      # TODO remove below after infra changes
      - uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 # v3.1.2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ea24045cb2f1d2ea4fe79f9248de800f74ba3aa3 # v3.0.2
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::928655657136:role/verify-conformance-ci
          role-duration-seconds: 3600
          role-session-name: verify-conformance-ci-gha-build
      - name: get kubeconfig
        run: |
          aws eks list-clusters \
            --region ap-southeast-2
          aws eks \
            update-kubeconfig \
            --region ap-southeast-2 \
            --name prow-cncf-io-eks
      - uses: ko-build/setup-ko@ace48d793556083a76f1e3e6068850c1f4a369aa # v0.6
      - id: build-release
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
        run: |
          ko resolve --base-import-paths -f <(kustomize build ./config/default/) > ./deploy/release.yaml
      - id: sign-images-and-attest-sbom
        env:
          COSIGN_YES: "true"
          IMAGE: ${{ steps.build.outputs.images }}
        run: |
          for IMAGE in $(yq -N '. | select(.kind == "Deployment") | .spec.template.spec.containers[].image' ./deploy/release.yaml | xargs); do
            cosign sign $IMAGE -y --recursive
            cosign download sbom $IMAGE > /tmp/sbom-spdx.json
            cosign attest --predicate /tmp/sbom-spdx.json $IMAGE -y --recursive
          done
      - id: release
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./deploy/release.yaml --clobber
      - name: Build push verify-conformance image to GHCR
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
        run: |
          kubectl apply -f ./deploy/release.yaml
      - name: watch rollout
        run: |
          kubectl -n prow rollout status deployment verify-conformance
          kubectl -n prow get pod -l app=verify-conformance
