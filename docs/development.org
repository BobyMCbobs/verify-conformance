#+title: Development

#+begin_quote
Set up a local environment for development
#+end_quote

* Notes

- currently pushes to a public container registry
- the bot will log in and make comments are your GitHub user or whatever user the token belongs to

* Environment

install tools (macOS or Linux)

- [[https://podman.io][podman]] or [[https://docker.com][docker]]
- [[https://ko.build][ko]]
- [[https://kind.sigs.k8s.io][kind]]
- [[https://kustomize.io][kustomize]]
- [[https://kubernetes.io/docs/tasks/tools/#kubectl][kubectl]]
- [[https://go.dev][go]]
- [[https://cli.github.com/][gh]]

#+begin_src shell :results silent
brew install podman ko kind kustomize kubectl go gh
#+end_src
(NOTE: *example*)

log in to GitHub with ~gh~ and package write permissions

#+begin_src shell: results silent
gh auth login -s write:packages
#+end_src

log into ghcr.io (*optional*)

#+begin_src shell :results silent
gh auth token | ko login ghcr.io --username "$(gh api user --jq .login)" --password-stdin
#+end_src

write secrets (*example*)

#+begin_src shell :results silent
cd "$(git rev-parse --show-toplevel)"
mkdir -p ./hack/local-dev/tmp/
echo "$(openssl rand -base64 15)" > ./hack/local-dev/tmp/hmac
gh auth token > ./hack/local-dev/tmp/token
#+end_src
(*NOTE*: avoid committing these values)

create a cluster

#+begin_src shell :results silent
./hack/local-dev/start-kind.sh
#+end_src

* Development loop

build image

#+begin_src shell :results silent
export KO_DOCKER_REPO=localhost:5001/vcr
IMAGE="$(ko build --base-import-paths .)"
#+end_src
(*NOTE*: feel free to swap out registry above)

configure components (*optional*)

#+begin_src shell :results silent
cd ./hack/local-dev/
kustomize edit set image ko://cncf.io/infra/verify-conformance-release="$IMAGE"
#+end_src
(*NOTE*: avoid committing this change)

apply

#+begin_src shell :results silent
cd "$(git rev-parse --show-toplevel)"
kustomize build ./hack/local-dev/ | kubectl apply -f -
#+end_src

observe resources

#+begin_src shell :results silent
kubectl -n prow get all
#+end_src

* Clean up environment

teardown

#+begin_src shell :results silent
kind delete cluster
docker rm -f kind-registry
#+end_src

* Tips

read the logs

#+begin_src shell :results silent
kubectl -n prow logs -l app=verify-conformance-release --tail=50 -f
#+end_src

restart it

#+begin_src shell :results silent
kubectl -n prow rollout restart deployment verify-conformance-release
#+end_src

compile test

#+begin_src shell
go build -o bin/ .
#+end_src
